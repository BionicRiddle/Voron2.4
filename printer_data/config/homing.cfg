[gcode_macro _HOME_XY]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    SAVE_GCODE_STATE NAME=home_xy_br

    SET_KINEMATIC_POSITION X=4
    G90
    G0 X0 F1200
    
    G28 Y
    G0 Y{printer.toolhead.axis_maximum.y|float} F6000
    
    G28 X
    
    # Move away
    G91
    G1 X-5 Y-5 F1200
    
    RESTORE_GCODE_STATE NAME=home_xy_br
    
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Ys]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2240 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2240 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    SAVE_GCODE_STATE NAME=home_y_br
    
    {% if "x" in printer.toolhead.homed_axes %}
      G0 X{printer.toolhead.axis_maximum.x|float - 4} F1200    
    {% else %}
       SET_KINEMATIC_POSITION X=4
       G0 X0 F1200
    {% endif %}

    # Home
    G28 Y
    
    # Move away
    G91
    G1 Y-5 F1200
    
    RESTORE_GCODE_STATE NAME=home_y_br
    
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set random_x = (range(-50, 50) | random) / 10 %}
    {% set random_y = (range(-50, 50) | random) / 10 %}
    
    SAVE_GCODE_STATE NAME=home_z_br
    G1 X{x_wait+random_x} Y{y_wait+random_y} F9000 # Goes to center of the bed
    G28 Z
    G1 Z10 F1200
    RESTORE_GCODE_STATE NAME=home_y_br

[homing_override]
axes: xyz
gcode:
    ### HOME LIFTBAR
    {% if 'L' in params %}
        MANUAL_STEPPER STEPPER=liftbar ENABLE=0
        MANUAL_STEPPER STEPPER=liftbar2 ENABLE=0
        INITIALIZE_TOOLCHANGER
        STOP_TOOL_PROBE_CRASH_DETECTION
        SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
        _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
		M400
    {% else %}
        {% if "z" in printer.toolhead.homed_axes and printer.toolhead.position.z < 10 %}
          G90
          G0 Z10 F1200
        {% else %}
          {% if "z" not in printer.toolhead.homed_axes %}
            G90
            SET_KINEMATIC_POSITION Z=0
            G0 Z3 F1200
          {% endif %}
        {% endif %}
        INITIALIZE_TOOLCHANGER
        STOP_TOOL_PROBE_CRASH_DETECTION
        {% if printer.probe.last_query  %}
            RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
        {% else %}
            SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0

            {% if 'X' in params %}
             {% if "y" in printer.toolhead.homed_axes %}
                   _HOME_X
                {% else %}
                    RESPOND TYPE=error MSG='Need to home Y first'
                {% endif %}
            {% endif %}

            {% if 'Y' in params %}
                _HOME_Y
            {% endif %}

            {% if 'Z' in params %}
                {% if "x" in printer.toolhead.homed_axes and "y" in printer.toolhead.homed_axes %}
                    G90
                    SET_KINEMATIC_POSITION Z=0
                    G0 Z3 F1200
                    _HOME_Z
                    _ADJUST_Z_HOME_FOR_TOOL_OFFSET
                {% else %}
                    RESPOND TYPE=error MSG='Need to home X and Y first'
                {% endif %}
            {% endif %}

	        {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params and 'L' not in params %}
	        {% if home_all %}
	            _HOME_Y
	            _HOME_X
	            _HOME_Z
	            _ADJUST_Z_HOME_FOR_TOOL_OFFSET
	        {% endif %}
		    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
		    M400
    	{% endif %}
    {% endif %}


; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    
    ; Apply gcode offsets
    RESPOND MSG="_APPLY_ACTIVE_TOOL_GCODE_OFFSETS kÃ¶rde nyss"
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
      RESPOND MSG="X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}"
    {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      G90 ; absolute mode
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z10 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}