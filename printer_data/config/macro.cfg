
[gcode_macro TOOLCHANGE_DEMO]
gcode:
    {% for n in range(20) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

    
#####################################################################
#   START MACROS
#####################################################################

[gcode_macro PRINT_START]
gcode:        
  {% if 'BED_TEMP' not in params or 'TOOL_TEMP' not in params %} 
    RESPOND TYPE=error MSG="Missing parameters in PRINT_START"
    M112
  {% endif %}

  STATUS_OFF
  set_led_active_tool
  STATUS_READY

  RESTORE_DEFAULT_VALUES
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED_TEMP|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Reset flow, feedrate and z-offset
  M220 S100
  M221 S100
  SET_GCODE_OFFSET Z=0 MOVE=1

  # Set Bed temp early
  M140 S{ target_bed }

  # Set active tool led
  set_led_active_tool TOOL={printer.tool_probe_endstop.active_tool_number}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  ##  Uncomment if you have a Nevermore.
  UPDATE_DELAYED_GCODE ID=filter_off DURATION=0
  SET_FAN_SPEED FAN=Nevermore SPEED=1                 # Turns on the nevermore

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED_TEMP|int > 90 %} # 90
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    M104 S150                                           # Pre-heats the nozzle to 150c

    SET_DISPLAY_TEXT MSG="Soak for 6min"                # Displays info
    G4 P360000                                          # Waits 6 min for the bedtemp to stabilize TEMP
    
  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  # Clean nozzle before probe
  SAFE_WIPE_NOZZLE

  #  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  G28 Z                           # Homes Z again to "flatten" excess plastic
  QUAD_GANTRY_LEVEL               # Levels the buildplate via QGL

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1      # Starts bed mesh


  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: { params.TOOL_TEMP }c"             # Displays info
  STATUS_HEATING                                                   # Sets SB-leds to heating-mode
  {% if params.TOOL is defined %}
    M104 T0
    ##M104 S{ params.TOOL_TEMP  } T{params.TOOL} ÅTERSTÄLL MIG
    T{params.TOOL}
  {% endif %}                                        
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan

  G28 Z # TEMP TA BORT MIG!!
  M109 S{ params.TOOL_TEMP }                                    # Heats the nozzle to printing temp0

  # Clean Nozzle
  SAFE_WIPE_NOZZLE

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  #G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X100 E20 F1000                                # Purge line
  #G90                                              # Absolut position
  LINE_PURGE
  #VORON_PURGE

[gcode_macro PRINT_END]
gcode:
    STATUS_CLEANING    
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G1 E-10 F300 # Retract Filament

    # Turn off bed, extruder, and fan
    TURN_OFF_HEATERS
    M106 S0 # ööh
    M107    # ööh

    G90
    T0 # Select first tool
    M400
    LIFTBAR_PARK
    
    # Disable steppers
    M400
    M84
    M107 # Borde va onödig
    #SET_FAN_SPEED FAN=Nevermore SPEED=0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    
    STATUS_READY
    RESTORE_DEFAULT_VALUES

[gcode_macro TURN_OFF_HEATERS_IF_IDLE]
gcode:
    {% if not printer.pause_resume.is_paused %}
      TURN_OFF_HEATERS
    {% endif %}

#####################################################################
#   Load and Unload Filament
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    M109 S240                                    # Heats the nozzle to 230c
    M300 # beep
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_BUCKET_MOVE
    {% if not ("xy" in printer.toolhead.homed_axes) %}
        G28 X Y   
    {% endif %}
    G90
    G0 X315 Y350 F13000  ;move to bucket
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_BUCKET_MOVE
    G91
    G92 E0
    G1 E120 F400 # fast-load
    G1 E-10 F300 # Retract Filament
    M300
    M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    SAVE_GCODE_STATE NAME=unload_state
    M109 S240                                    # Heats the nozzle to 230c
    G91
    M300 # beep
    G92 E0
    G1 E0.5 F{speed} # purge
    G1 E-200 F800 # fast-unload
    M300
    M300
    RESTORE_GCODE_STATE NAME=unload_state

#####################################################################
#   Clean Nozzle
#####################################################################

[gcode_macro BRUSH_NOZZLE]
# heat nozzle for best results
variable_x1: 255 # left of brush   <<<edit this value>>>
variable_x2: 315 # right or brush  <<<edit this value>>>
variable_y1: 350 # y value         <<<edit this value>>>
variable_z1: 5 # nozzle height   <<<edit this value>>>
gcode:
    SAVE_GCODE_STATE NAME=brush_state
    STATUS_CLEANING
    M400  ;wait for buffer to clear
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28         ;home axes before travel moves
    {% endif %}
    

    SET_VELOCITY_LIMIT ACCEL=12000
    G90
    G0 Z{z1}              ;move down, ready for brushing
    G0 X{x2} Y{y1} F13000 ;Right position

    G1 E8 F400 # Extrude
    G1 E-2 F400 # Extrude
    G4 P2000 # Wait 2 sec
    
    M117 Brushing Nozzle
    G0 X{x1} F13000 ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 Z5 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned
    RESTORE_GCODE_STATE NAME=brush_state

[gcode_macro BRUSH_NOZZLE_ONLY_CLEAN]
# heat nozzle for best results
variable_x1: 255 # left of brush   <<<edit this value>>>
variable_x2: 315 # right or brush  <<<edit this value>>>
variable_y1: 350 # y value         <<<edit this value>>>
variable_z1: 5 # nozzle height   <<<edit this value>>>
gcode:
    SAVE_GCODE_STATE NAME=brush_state
    STATUS_CLEANING
    M400  ;wait for buffer to clear
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28         ;home axes before travel moves
    {% endif %}
    

    SET_VELOCITY_LIMIT ACCEL=12000
    G90
    G0 Z{z1}              ;move down, ready for brushing
    G0 X{x2} Y{y1} F13000 ;Right position
    
    M117 Brushing Nozzle
    G0 X{x1} F13000 ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 Z5 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned
    RESTORE_GCODE_STATE NAME=brush_state

#####################################################################
#   Config
#####################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 315.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 340.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 30.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 30.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "STATUS_BUSY"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "STATUS_PRINTING"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "PRE_CANCEL_PRINT"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro PRE_CANCEL_PRINT]
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 Z10 F3000 ; Move Printer Head Out of Way
   {% endif %}
   G90
   ;set part fan speed to zero.
   M106 S0
   M107
   UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
   ; Change to T0
   T0
   M400
   LIFTBAR_PARK
   ;bed and hotend are left at the print temps in case I want to restart.
   CLEAR_PAUSE
   STATUS_READY

#####################################################################
#   Functions
#####################################################################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio * printer.configfile.settings.printer.max_accel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.085000, 0.100000, 0.122500, 0.122500, 0.140000, 0.130000, 0.125000, 0.140000, 0.142500, 0.125000, 0.125000, 0.152500, 0.152500, 0.132500, 0.137500, 0.130000, 0.117500, 0.117500, 0.092500, 0.097500
#*# 	  0.105000, 0.105000, 0.115000, 0.137500, 0.140000, 0.132500, 0.132500, 0.140000, 0.137500, 0.135000, 0.135000, 0.152500, 0.150000, 0.145000, 0.145000, 0.140000, 0.115000, 0.110000, 0.100000, 0.100000
#*# 	  0.102500, 0.122500, 0.137500, 0.135000, 0.147500, 0.130000, 0.135000, 0.137500, 0.142500, 0.150000, 0.147500, 0.145000, 0.152500, 0.140000, 0.147500, 0.142500, 0.122500, 0.112500, 0.085000, 0.077500
#*# 	  0.102500, 0.102500, 0.115000, 0.122500, 0.142500, 0.125000, 0.130000, 0.137500, 0.127500, 0.130000, 0.125000, 0.135000, 0.147500, 0.122500, 0.125000, 0.115000, 0.100000, 0.092500, 0.062500, 0.065000
#*# 	  0.105000, 0.117500, 0.125000, 0.125000, 0.140000, 0.137500, 0.122500, 0.127500, 0.140000, 0.122500, 0.127500, 0.132500, 0.137500, 0.137500, 0.130000, 0.125000, 0.110000, 0.082500, 0.057500, 0.047500
#*# 	  0.107500, 0.102500, 0.120000, 0.125000, 0.125000, 0.122500, 0.110000, 0.122500, 0.120000, 0.115000, 0.125000, 0.130000, 0.127500, 0.117500, 0.107500, 0.112500, 0.097500, 0.097500, 0.055000, 0.060000
#*# 	  0.100000, 0.097500, 0.117500, 0.117500, 0.130000, 0.137500, 0.100000, 0.110000, 0.120000, 0.100000, 0.110000, 0.132500, 0.127500, 0.120000, 0.112500, 0.090000, 0.087500, 0.070000, 0.060000, 0.045000
#*# 	  0.115000, 0.110000, 0.107500, 0.110000, 0.132500, 0.107500, 0.115000, 0.120000, 0.112500, 0.110000, 0.110000, 0.110000, 0.115000, 0.120000, 0.095000, 0.102500, 0.085000, 0.065000, 0.067500, 0.040000
#*# 	  0.080000, 0.102500, 0.110000, 0.095000, 0.125000, 0.105000, 0.095000, 0.092500, 0.095000, 0.092500, 0.092500, 0.095000, 0.102500, 0.082500, 0.080000, 0.075000, 0.080000, 0.047500, 0.037500, 0.027500
#*# 	  0.072500, 0.085000, 0.085000, 0.102500, 0.097500, 0.085000, 0.085000, 0.095000, 0.087500, 0.075000, 0.082500, 0.095000, 0.085000, 0.080000, 0.080000, 0.077500, 0.060000, 0.035000, 0.035000, 0.017500
#*# 	  0.075000, 0.092500, 0.095000, 0.095000, 0.115000, 0.105000, 0.082500, 0.080000, 0.095000, 0.085000, 0.072500, 0.102500, 0.085000, 0.075000, 0.070000, 0.077500, 0.055000, 0.047500, 0.040000, 0.040000
#*# 	  0.075000, 0.085000, 0.095000, 0.100000, 0.110000, 0.092500, 0.090000, 0.090000, 0.097500, 0.085000, 0.097500, 0.095000, 0.100000, 0.092500, 0.092500, 0.107500, 0.080000, 0.042500, 0.042500, 0.030000
#*# 	  0.065000, 0.067500, 0.087500, 0.075000, 0.095000, 0.107500, 0.095000, 0.095000, 0.100000, 0.082500, 0.082500, 0.097500, 0.092500, 0.092500, 0.080000, 0.085000, 0.070000, 0.060000, 0.050000, 0.027500
#*# 	  0.055000, 0.077500, 0.105000, 0.095000, 0.105000, 0.087500, 0.095000, 0.097500, 0.100000, 0.092500, 0.090000, 0.090000, 0.105000, 0.082500, 0.092500, 0.087500, 0.070000, 0.040000, 0.037500, 0.060000
#*# 	  0.062500, 0.082500, 0.082500, 0.092500, 0.102500, 0.107500, 0.095000, 0.110000, 0.107500, 0.082500, 0.097500, 0.130000, 0.097500, 0.107500, 0.097500, 0.102500, 0.090000, 0.067500, 0.067500, 0.042500
#*# 	  0.050000, 0.080000, 0.077500, 0.085000, 0.115000, 0.095000, 0.107500, 0.102500, 0.095000, 0.100000, 0.097500, 0.092500, 0.107500, 0.100000, 0.090000, 0.092500, 0.075000, 0.062500, 0.047500, 0.060000
#*# 	  0.070000, 0.085000, 0.105000, 0.120000, 0.120000, 0.112500, 0.117500, 0.122500, 0.132500, 0.115000, 0.120000, 0.122500, 0.120000, 0.125000, 0.112500, 0.117500, 0.110000, 0.105000, 0.090000, 0.072500
#*# 	  0.077500, 0.092500, 0.102500, 0.102500, 0.127500, 0.107500, 0.125000, 0.122500, 0.125000, 0.115000, 0.117500, 0.140000, 0.120000, 0.122500, 0.107500, 0.130000, 0.112500, 0.105000, 0.090000, 0.080000
#*# 	  0.072500, 0.105000, 0.125000, 0.125000, 0.140000, 0.135000, 0.132500, 0.170000, 0.155000, 0.137500, 0.145000, 0.150000, 0.157500, 0.145000, 0.152500, 0.140000, 0.135000, 0.137500, 0.112500, 0.087500
#*# 	  0.087500, 0.135000, 0.122500, 0.135000, 0.137500, 0.140000, 0.142500, 0.162500, 0.167500, 0.157500, 0.160000, 0.157500, 0.175000, 0.160000, 0.162500, 0.135000, 0.085000, 0.105000, 0.105000, 0.102500
#*# x_count = 20
#*# y_count = 20
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 319.94
#*# min_y = 30.0
#*# max_y = 319.94
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 53.0
#*# shaper_type_y = mzv
#*# shaper_freq_y = 41.4
